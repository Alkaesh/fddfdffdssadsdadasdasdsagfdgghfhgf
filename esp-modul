-- esp-modul.lua
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESP = {
    espEnabled = true,
    teamCheckEnabled = true,
    tracersEnabled = true,
    boxesEnabled = true,
    tracerFromBottom = false,
    espVisibleColor = Color3.fromRGB(0, 255, 0),
    espNotVisibleColor = Color3.fromRGB(255, 0, 0),
    espMaxDistance = 1000,
    boxTransparency = 0.5,
    tracerThickness = 2,
    boxThickness = 0.1,
    textSize = 10,
    skeletonEnabled = false,
    xrayEnabled = false,
    xrayColor = Color3.fromRGB(128, 0, 128),
    espElements = {}
}

local function createESP(player)
    if player == LocalPlayer then return end
    local character = player.Character
    if not character then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChild("Humanoid")
    if not rootPart or not humanoid then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_Billboard"
    billboard.Parent = rootPart
    billboard.Size = UDim2.new(0, 100, 0, 60)
    billboard.StudsOffset = Vector3.new(3, 0, 0)
    billboard.AlwaysOnTop = true

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Parent = billboard
    nameLabel.Size = UDim2.new(1, 0, 0, 20)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.TextSize = ESP.textSize
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextStrokeTransparency = 0.5

    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Parent = billboard
    distanceLabel.Size = UDim2.new(1, 0, 0, 20)
    distanceLabel.Position = UDim2.new(0, 0, 0, 20)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.Text = "0 studs"
    distanceLabel.TextColor3 = Color3.new(1, 1, 1)
    distanceLabel.TextSize = ESP.textSize
    distanceLabel.Font = Enum.Font.Gotham
    distanceLabel.TextStrokeTransparency = 0.5

    local healthLabel = Instance.new("TextLabel")
    healthLabel.Parent = billboard
    healthLabel.Size = UDim2.new(1, 0, 0, 20)
    healthLabel.Position = UDim2.new(0, 0, 0, 40)
    healthLabel.BackgroundTransparency = 1
    healthLabel.Text = "100%"
    healthLabel.TextColor3 = Color3.new(1, 1, 1)
    healthLabel.TextSize = ESP.textSize
    healthLabel.Font = Enum.Font.Gotham
    healthLabel.TextStrokeTransparency = 0.5

    local box = Instance.new("BoxHandleAdornment")
    box.Name = "ESP_Box"
    box.Parent = rootPart
    box.Adornee = rootPart
    box.Size = Vector3.new(4, 6, 4)
    box.AlwaysOnTop = true
    box.ZIndex = 0
    box.Transparency = ESP.boxTransparency
    box.Color3 = ESP.espVisibleColor

    local tracer = Drawing.new("Line")
    tracer.Thickness = ESP.tracerThickness
    tracer.Transparency = 1

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Parent = character
    highlight.Adornee = character
    highlight.FillColor = ESP.xrayColor
    highlight.OutlineColor = ESP.xrayColor
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Enabled = false

    ESP.espElements[player] = {
        Billboard = billboard,
        NameLabel = nameLabel,
        DistanceLabel = distanceLabel,
        HealthLabel = healthLabel,
        Box = box,
        Tracer = tracer,
        Highlight = highlight,
        Visible = false,
        Skeleton = {}
    }
end

local function removeESP(player)
    local elements = ESP.espElements[player]
    if not elements then return end
    
    elements.Billboard:Destroy()
    elements.Box:Destroy()
    elements.Tracer:Remove()
    elements.Highlight:Destroy()
    for _, skeletonLine in pairs(elements.Skeleton) do
        skeletonLine:Remove()
    end
    ESP.espElements[player] = nil
end

local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

local function isPlayerVisible(targetCharacter)
    local localCharacter = LocalPlayer.Character
    if not localCharacter then return false end
    
    local localRoot = localCharacter:FindFirstChild("HumanoidRootPart")
    local targetRoot = targetCharacter:FindFirstChild("HumanoidRootPart")
    local targetHead = targetCharacter:FindFirstChild("Head")
    if not localRoot or not targetRoot or not targetHead then return false end

    raycastParams.FilterDescendantsInstances = {localCharacter}
    local cameraPos = Camera.CFrame.Position
    
    local headDirection = targetHead.Position - cameraPos
    local torsoDirection = targetRoot.Position - cameraPos
    
    local raycastResult1 = workspace:Raycast(cameraPos, headDirection, raycastParams)
    local raycastResult2 = workspace:Raycast(cameraPos, torsoDirection, raycastParams)

    return (not raycastResult1 or raycastResult1.Instance:IsDescendantOf(targetCharacter)) or 
           (not raycastResult2 or raycastResult2.Instance:IsDescendantOf(targetCharacter))
end

local function isSameTeam(player)
    local localTeam = LocalPlayer.Team
    local playerTeam = player.Team
    return localTeam and playerTeam and localTeam == playerTeam
end

local viewportSize = Camera.ViewportSize
local screenCenterBase = Vector2.new(viewportSize.X * 0.5, viewportSize.Y * 0.5)
local screenBottom = Vector2.new(viewportSize.X * 0.5, viewportSize.Y)

local function updateESP()
    if not ESP.espEnabled then
        for _, elements in pairs(ESP.espElements) do
            elements.Billboard.Enabled = false
            elements.Box.Visible = false
            elements.Tracer.Visible = false
            elements.Highlight.Enabled = false
            for _, line in pairs(elements.Skeleton) do
                line.Visible = false
            end
        end
        return
    end

    local localCharacter = LocalPlayer.Character
    local localRoot = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
    local screenCenter = ESP.tracerFromBottom and screenBottom or screenCenterBase
    local maxDistance = ESP.espMaxDistance
    local teamCheck = ESP.teamCheckEnabled

    for _, player in pairs(Players:GetPlayers()) do
        if player == LocalPlayer then continue end
        
        local elements = ESP.espElements[player]
        local character = player.Character
        
        if not elements and character and localRoot then
            local targetRoot = character:FindFirstChild("HumanoidRootPart")
            if targetRoot and (localRoot.Position - targetRoot.Position).Magnitude <= maxDistance then
                createESP(player)
            end
            continue
        end
        
        if not character or not elements then continue end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        local humanoid = character:FindFirstChild("Humanoid")
        if not rootPart or not humanoid or not localRoot then
            elements.Billboard.Enabled = false
            elements.Box.Visible = false
            elements.Tracer.Visible = false
            elements.Highlight.Enabled = false
            for _, line in pairs(elements.Skeleton) do
                line.Visible = false
            end
            continue
        end

        local distance = (localRoot.Position - rootPart.Position).Magnitude
        local isDead = humanoid.Health <= 0
        local isTeammate = teamCheck and isSameTeam(player)

        if distance > maxDistance or isDead or isTeammate then
            elements.Billboard.Enabled = false
            elements.Box.Visible = false
            elements.Tracer.Visible = false
            elements.Highlight.Enabled = false
            for _, line in pairs(elements.Skeleton) do
                line.Visible = false
            end
            continue
        end

        local isVisible = isPlayerVisible(character)
        local color = isVisible and ESP.espVisibleColor or ESP.espNotVisibleColor

        -- Update Billboard
        local billboard = elements.Billboard
        billboard.Enabled = true
        elements.NameLabel.TextColor3 = color
        elements.NameLabel.TextSize = ESP.textSize
        elements.DistanceLabel.Text = math.floor(distance) .. " studs"
        elements.DistanceLabel.TextColor3 = color
        elements.DistanceLabel.TextSize = ESP.textSize
        elements.HealthLabel.Text = math.floor((humanoid.Health / humanoid.MaxHealth) * 100) .. "%"
        elements.HealthLabel.TextColor3 = color
        elements.HealthLabel.TextSize = ESP.textSize

        -- Update Box
        local box = elements.Box
        if ESP.boxesEnabled then
            local modelCFrame, modelSize = character:GetBoundingBox()
            box.Size = modelSize + Vector3.new(ESP.boxThickness, ESP.boxThickness, ESP.boxThickness)
            box.Color3 = color
            box.Transparency = ESP.boxTransparency
            box.Visible = true
        else
            box.Visible = false
        end

        -- Update Tracer
        local tracer = elements.Tracer
        if ESP.tracersEnabled then
            local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0))
            if onScreen then
                tracer.From = screenCenter
                tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                tracer.Color = color
                tracer.Thickness = ESP.tracerThickness
                tracer.Visible = true
            else
                tracer.Visible = false
            end
        else
            tracer.Visible = false
        end

        -- Update X-Ray
        local highlight = elements.Highlight
        if ESP.xrayEnabled then
            highlight.FillColor = ESP.xrayColor
            highlight.OutlineColor = ESP.xrayColor
            highlight.Enabled = true
        else
            highlight.Enabled = false
        end

        -- Update Skeleton
        if ESP.skeletonEnabled then
            local parts = {
                Head = character:FindFirstChild("Head"),
                UpperTorso = character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso"),
                LowerTorso = character:FindFirstChild("LowerTorso") or character:FindFirstChild("Torso"),
                LeftUpperArm = character:FindFirstChild("LeftUpperArm") or character:FindFirstChild("LeftArm"),
                RightUpperArm = character:FindFirstChild("RightUpperArm") or character:FindFirstChild("RightArm"),
                LeftLowerArm = character:FindFirstChild("LeftLowerArm") or character:FindFirstChild("LeftArm"),
                RightLowerArm = character:FindFirstChild("RightLowerArm") or character:FindFirstChild("RightArm"),
                LeftUpperLeg = character:FindFirstChild("LeftUpperLeg") or character:FindFirstChild("LeftLeg"),
                RightUpperLeg = character:FindFirstChild("RightUpperLeg") or character:FindFirstChild("RightLeg"),
                LeftLowerLeg = character:FindFirstChild("LeftLowerLeg") or character:FindFirstChild("LeftLeg"),
                RightLowerLeg = character:FindFirstChild("RightLowerLeg") or character:FindFirstChild("RightLeg")
            }

            local connections = {
                {"Head", "UpperTorso"}, {"UpperTorso", "LowerTorso"},
                {"UpperTorso", "LeftUpperArm"}, {"UpperTorso", "RightUpperArm"},
                {"LeftUpperArm", "LeftLowerArm"}, {"RightUpperArm", "RightLowerArm"},
                {"LowerTorso", "LeftUpperLeg"}, {"LowerTorso", "RightUpperLeg"},
                {"LeftUpperLeg", "LeftLowerLeg"}, {"RightUpperLeg", "RightLowerLeg"}
            }

            for i, connection in ipairs(connections) do
                local fromPart = parts[connection[1]]
                local toPart = parts[connection[2]]
                if fromPart and toPart then
                    local fromPos, fromOnScreen = Camera:WorldToViewportPoint(fromPart.Position)
                    local toPos, toOnScreen = Camera:WorldToViewportPoint(toPart.Position)
                    local line = elements.Skeleton[i] or Drawing.new("Line")
                    if not elements.Skeleton[i] then
                        line.Thickness = 1
                        line.Transparency = 1
                        elements.Skeleton[i] = line
                    end
                    line.Visible = fromOnScreen and toOnScreen
                    if line.Visible then
                        line.From = Vector2.new(fromPos.X, fromPos.Y)
                        line.To = Vector2.new(toPos.X, toPos.Y)
                        line.Color = color
                    end
                elseif elements.Skeleton[i] then
                    elements.Skeleton[i].Visible = false
                end
            end
        else
            for _, line in pairs(elements.Skeleton) do
                line.Visible = false
            end
        end
    end
end

local function initializeESP()
    for _, player in pairs(Players:GetPlayers()) do
        if not ESP.espElements[player] then
            createESP(player)
        end
    end
end

local function onCharacterAdded(player, character)
    if ESP.espEnabled and ESP.espElements[player] then
        removeESP(player)
        createESP(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if ESP.espEnabled then
        createESP(player)
    end
    player.CharacterAdded:Connect(function(character)
        onCharacterAdded(player, character)
    end)
end)

Players.PlayerRemoving:Connect(removeESP)

for _, player in pairs(Players:GetPlayers()) do
    player.CharacterAdded:Connect(function(character)
        onCharacterAdded(player, character)
    end)
end

RunService.RenderStepped:Connect(updateESP)
if ESP.espEnabled then
    initializeESP()
end

return ESP
