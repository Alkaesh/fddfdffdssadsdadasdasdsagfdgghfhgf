-- MainScript.lua (Оптимизирован для обновленной библиотеки)

-- Основные сервисы Roblox
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Загрузка библиотеки
local Lib
local function loadLibrary()
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/Alkaesh/fddfdffdssadsdadasdasdsagfdgghfhgf/refs/heads/main/robloxlib.lua"))()
    end)
    if success and result then
        return result
    else
        warn("Ошибка загрузки библиотеки: " .. tostring(result))
        return nil
    end
end

Lib = loadLibrary()
if not Lib then
    warn("Не удалось загрузить библиотеку после попыток")
    return
end

-- Функция для загрузки модулей с повторными попытками
local function loadModule(url, moduleName, retries, delay)
    retries = retries or 3
    delay = delay or 2
    local module
    for i = 1, retries do
        local success, result = pcall(function()
            return loadstring(game:HttpGet(url))()
        end)
        if success and result then
            module = result
            Lib.Menu:Notify("Модуль " .. moduleName .. " успешно загружен", 3)
            break
        else
            warn("Попытка " .. i .. " не удалась для " .. moduleName .. ": " .. tostring(result))
            if i < retries then
                wait(delay)
            end
        end
    end
    if not module then
        Lib.Menu:Notify("Не удалось загрузить модуль " .. moduleName .. " после " .. retries .. " попыток", 5)
    end
    return module
end

-- Загрузка модулей ESP и Fly
local ESP = loadModule("https://raw.githubusercontent.com/Alkaesh/fddfdffdssadsdadasdasdsagfdgghfhgf/refs/heads/main/esp-modul", "ESP", 3, 2)
local Fly = loadModule("https://raw.githubusercontent.com/Alkaesh/fddfdffdssadsdadasdasdsagfdgghfhgf/refs/heads/main/fly-modul", "Fly", 3, 2)

-- Создание меню с использованием библиотеки
local menu = Lib.Menu:CreateMenu("Za Xoxlov")

-- Создание вкладок
local mainTab = Lib.Menu:AddTab(menu, "Основное")
local teleportTab = Lib.Menu:AddTab(menu, "Телепортация")
local espTab = ESP and Lib.Menu:AddTab(menu, "ESP")

-- Хранение настроек
local settings = {
    speed = { enabled = false, slider = 16, current = 16, default = 16 },
    jump = { enabled = false, slider = 50, current = 50, default = 50 },
    teleportOnClick = { enabled = false, key = Enum.KeyCode.LeftControl },
    noclip = { enabled = false, connection = nil },
    antiAfk = { enabled = false },
    infiniteJump = { enabled = false },
    particles = { enabled = false, emitter = nil, color = Color3.fromRGB(255, 0, 0), rate = 50 }
}

-- Система уведомлений с задержкой
local lastNotificationTime = 0
local notificationCooldown = 1

local function notify(message, duration)
    local currentTime = tick()
    if currentTime - lastNotificationTime >= notificationCooldown then
        Lib.Menu:Notify(message, duration or 3)
        lastNotificationTime = currentTime
    end
end

-- Получение персонажа игрока
local function getCharacter(player)
    return player.Character
end

-- Обновление стандартных значений скорости и прыжка
local function updateDefaultValues()
    local character = getCharacter(LocalPlayer)
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            settings.speed.default = humanoid.WalkSpeed
            settings.jump.default = humanoid.JumpPower
            if not settings.speed.enabled then
                settings.speed.current = settings.speed.default
                settings.speed.slider = settings.speed.default
            end
            if not settings.jump.enabled then
                settings.jump.current = settings.jump.default
                settings.jump.slider = settings.jump.default
            end
        end
    end
end
updateDefaultValues()

-- Обработка респавна персонажа
LocalPlayer.CharacterAdded:Connect(function(character)
    updateDefaultValues()
    local humanoid = character:WaitForChild("Humanoid")
    if settings.speed.enabled then
        settings.speed.current = settings.speed.slider
        humanoid.WalkSpeed = settings.speed.current
        notify("Скорость установлена: " .. settings.speed.current)
    else
        humanoid.WalkSpeed = settings.speed.default
    end
    if settings.jump.enabled then
        settings.jump.current = settings.jump.slider
        humanoid.JumpPower = settings.jump.current
        notify("Сила прыжка установлена: " .. settings.jump.current)
    else
        humanoid.JumpPower = settings.jump.default
    end
    if settings.particles.enabled then
        wait(0.1)
        toggleParticles(false)
        toggleParticles(true)
    end
end)

-- Постоянное обновление скорости и прыжка
RunService.RenderStepped:Connect(function()
    local character = getCharacter(LocalPlayer)
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            if settings.speed.enabled and humanoid.WalkSpeed ~= settings.speed.current then
                humanoid.WalkSpeed = settings.speed.current
            elseif not settings.speed.enabled and humanoid.WalkSpeed ~= settings.speed.default then
                humanoid.WalkSpeed = settings.speed.default
            end
            if settings.jump.enabled and humanoid.JumpPower ~= settings.jump.current then
                humanoid.JumpPower = settings.jump.current
            elseif not settings.jump.enabled and humanoid.JumpPower ~= settings.jump.default then
                humanoid.JumpPower = settings.jump.default
            end
        end
    end
end)

-- Anti-AFK (предотвращение отключения за неактивность)
local function toggleAntiAfk(state)
    settings.antiAfk.enabled = state
    if state then
        spawn(function()
            while settings.antiAfk.enabled do
                local character = getCharacter(LocalPlayer)
                if character then
                    local rootPart = character:FindFirstChild("HumanoidRootPart")
                    if rootPart then
                        rootPart.CFrame = rootPart.CFrame * CFrame.new(0.05, 0, 0)
                        wait(0.1)
                        rootPart.CFrame = rootPart.CFrame * CFrame.new(-0.05, 0, 0)
                    end
                end
                wait(15) -- Увеличен интервал для оптимизации
            end
        end)
        notify("Anti-AFK включен")
    else
        notify("Anti-AFK выключен")
    end
end

-- Noclip (прохождение сквозь стены)
local function toggleNoclip(state)
    settings.noclip.enabled = state
    if state then
        settings.noclip.connection = RunService.Stepped:Connect(function()
            if settings.noclip.enabled then
                local character = getCharacter(LocalPlayer)
                if character then
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end
        end)
        notify("Noclip включен")
    else
        local character = getCharacter(LocalPlayer)
        if character then
            for _, part in pairs(character:GetChildren()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
        if settings.noclip.connection then
            settings.noclip.connection:Disconnect()
            settings.noclip.connection = nil
        end
        notify("Noclip выключен")
    end
end

-- Бесконечный прыжок
local function toggleInfiniteJump(state)
    settings.infiniteJump.enabled = state
    if state then
        local connection
        connection = UserInputService.JumpRequest:Connect(function()
            if settings.infiniteJump.enabled then
                local character = getCharacter(LocalPlayer)
                if character then
                    local humanoid = character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            else
                connection:Disconnect()
            end
        end)
        notify("Бесконечный прыжок включен")
    else
        notify("Бесконечный прыжок выключен")
    end
end

-- Телепортация к игроку по частичному имени
local function teleportToPlayer(partialName)
    if not partialName or partialName == "" then
        notify("Введите имя игрока!")
        return
    end

    partialName = partialName:lower()
    local matchingPlayers = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name:lower():sub(1, #partialName) == partialName then
            table.insert(matchingPlayers, player)
        end
    end

    if #matchingPlayers == 0 then
        notify("Игрок не найден: " .. partialName)
    elseif #matchingPlayers == 1 then
        local targetPlayer = matchingPlayers[1]
        local character = getCharacter(LocalPlayer)
        local targetCharacter = getCharacter(targetPlayer)
        if character and targetCharacter then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
            if rootPart and targetRootPart then
                rootPart.CFrame = targetRootPart.CFrame
                notify("Телепортация к " .. targetPlayer.Name)
            else
                notify("Ошибка телепортации: нет HumanoidRootPart")
            end
        else
            notify("Ошибка телепортации: персонаж не найден")
        end
    else
        local playerList = "Найдено несколько игроков: "
        for i, player in ipairs(matchingPlayers) do
            playerList = playerList .. player.Name
            if i < #matchingPlayers then
                playerList = playerList .. ", "
            end
        end
        notify(playerList .. " — уточните имя")
    end
end

-- Телепортация по клику
local function teleportToClickPosition()
    local character = getCharacter(LocalPlayer)
    if not character then
        notify("Ошибка телепортации: персонаж не найден")
        return
    end

    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then
        notify("Ошибка телепортации: нет HumanoidRootPart")
        return
    end

    local mouseHit = Mouse.Hit
    if mouseHit then
        local wasNoclipEnabled = settings.noclip.enabled
        toggleNoclip(true)
        rootPart.CFrame = CFrame.new(mouseHit.Position + Vector3.new(0, 3, 0))
        wait(0.1)
        toggleNoclip(wasNoclipEnabled)
        notify("Телепортация по клику выполнена", 2)
    else
        notify("Ошибка телепортации: неверная позиция")
    end
end

-- Обработка клика для телепортации
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if settings.teleportOnClick.enabled and input.UserInputType == Enum.UserInputType.MouseButton1 and UserInputService:IsKeyDown(settings.teleportOnClick.key) then
        teleportToClickPosition()
    end
end)

-- Управление частицами
local function toggleParticles(state)
    settings.particles.enabled = state
    local character = getCharacter(LocalPlayer)

    if state then
        if character then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                settings.particles.emitter = Instance.new("ParticleEmitter")
                settings.particles.emitter.Texture = "rbxassetid://243098098"
                settings.particles.emitter.Size = NumberSequence.new(0.5)
                settings.particles.emitter.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 1)})
                settings.particles.emitter.Lifetime = NumberRange.new(1, 2)
                settings.particles.emitter.Rate = settings.particles.rate
                settings.particles.emitter.Speed = NumberRange.new(5, 10)
                settings.particles.emitter.SpreadAngle = Vector2.new(360, 360)
                settings.particles.emitter.Color = ColorSequence.new(settings.particles.color)
                settings.particles.emitter.Parent = rootPart
                notify("Эффект частиц включен")
            else
                notify("Ошибка частиц: нет HumanoidRootPart")
                settings.particles.enabled = false
            end
        else
            notify("Ошибка частиц: персонаж не найден")
            settings.particles.enabled = false
        end
    else
        if settings.particles.emitter then
            settings.particles.emitter:Destroy()
            settings.particles.emitter = nil
        end
        notify("Эффект частиц выключен")
    end
end

-- Обновление частиц при респавне
LocalPlayer.CharacterAdded:Connect(function(character)
    if settings.particles.enabled then
        wait(0.1)
        toggleParticles(false)
        toggleParticles(true)
    end
end)

-- === Интерфейс: Вкладка Основное ===
Lib.Menu:AddSection(mainTab, "Движение")
Lib.Menu:AddToggle(mainTab, "Включить ускорение", false, function(state)
    settings.speed.enabled = state
    if state then
        settings.speed.current = settings.speed.slider
        local character = getCharacter(LocalPlayer)
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = settings.speed.current
                notify("Ускорение включено: " .. settings.speed.current)
            else
                notify("Ошибка ускорения: нет Humanoid")
            end
        else
            notify("Ошибка ускорения: персонаж не найден")
        end
    else
        settings.speed.current = settings.speed.default
        local character = getCharacter(LocalPlayer)
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.WalkSpeed = settings.speed.default
            notify("Ускорение выключено: " .. settings.speed.default)
        end
    end
end)
Lib.Menu:AddSlider(mainTab, "Скорость", 16, 150, settings.speed.default, function(value)
    settings.speed.slider = value
    if settings.speed.enabled then
        settings.speed.current = value
        local character = getCharacter(LocalPlayer)
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.WalkSpeed = value
            notify("Скорость: " .. value)
        end
    end
end)
Lib.Menu:AddToggle(mainTab, "Включить силу прыжка", false, function(state)
    settings.jump.enabled = state
    if state then
        settings.jump.current = settings.jump.slider
        local character = getCharacter(LocalPlayer)
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.JumpPower = settings.jump.current
            notify("Сила прыжка включена: " .. settings.jump.current)
        else
            notify("Ошибка силы прыжка: персонаж не найден")
        end
    else
        settings.jump.current = settings.jump.default
        local character = getCharacter(LocalPlayer)
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.JumpPower = settings.jump.default
            notify("Сила прыжка выключена: " .. settings.jump.default)
        end
    end
end)
Lib.Menu:AddSlider(mainTab, "Сила прыжка", 50, 250, settings.jump.default, function(value)
    settings.jump.slider = value
    if settings.jump.enabled then
        settings.jump.current = value
        local character = getCharacter(LocalPlayer)
        if character and character:FindFirstChild("Humanoid") then
            character.Humanoid.JumpPower = value
            notify("Сила прыжка: " .. value)
        end
    end
end)
Lib.Menu:AddToggle(mainTab, "Бесконечный прыжок", false, toggleInfiniteJump)
Lib.Menu:AddToggle(mainTab, "Noclip", false, toggleNoclip)

-- Секция полета (если модуль доступен)
if Fly then
    Lib.Menu:AddSection(mainTab, "Полёт")
    Lib.Menu:AddToggle(mainTab, "Включить полёт", false, function(state)
        local success, message = Fly:ToggleFly(state)
        notify(success and message or "Ошибка полёта: " .. message)
    end)
    Lib.Menu:AddSlider(mainTab, "Скорость полёта", 50, 300, 50, function(value)
        Fly.flySpeed = value
        notify("Скорость полёта: " .. value)
    end)
end

-- Секция утилит
Lib.Menu:AddSection(mainTab, "Утилиты")
Lib.Menu:AddToggle(mainTab, "Anti-AFK", false, toggleAntiAfk)

-- Секция визуальных эффектов
Lib.Menu:AddSection(mainTab, "Визуальные эффекты")
Lib.Menu:AddToggle(mainTab, "Частицы", false, toggleParticles)
Lib.Menu:AddSlider(mainTab, "Скорость частиц", 10, 100, 50, function(value)
    settings.particles.rate = value
    if settings.particles.emitter then
        settings.particles.emitter.Rate = value
    end
    notify("Скорость частиц: " .. value)
end)
Lib.Menu:AddColorPicker(mainTab, "Цвет частиц", settings.particles.color, function(color)
    settings.particles.color = color
    if settings.particles.emitter then
        settings.particles.emitter.Color = ColorSequence.new(color)
    end
    notify("Цвет частиц обновлён")
end)

-- === Интерфейс: Вкладка Телепортация ===
Lib.Menu:AddSection(teleportTab, "Телепортация к игроку")
local teleportTextBox = Lib.Menu:AddTextBox(teleportTab, "Имя игрока", "", function(playerName)
    teleportToPlayer(playerName)
end)
Lib.Menu:AddButton(teleportTab, "Телепортироваться", function()
    teleportToPlayer(teleportTextBox.Text)
end)

Lib.Menu:AddSection(teleportTab, "Телепортация по клику")
Lib.Menu:AddToggle(teleportTab, "Включить телепортацию по клику", false, function(state)
    settings.teleportOnClick.enabled = state
    notify("Телепортация по клику " .. (state and "включена (" .. settings.teleportOnClick.key.Name .. ")" or "выключена"))
end)
Lib.Menu:AddDropdown(teleportTab, "Клавиша телепортации", {"LeftControl", "LeftAlt", "LeftShift"}, "LeftControl", function(key)
    settings.teleportOnClick.key = Enum.KeyCode[key]
    if settings.teleportOnClick.enabled then
        notify("Клавиша телепортации: " .. key)
    end
end)

-- === Интерфейс: Вкладка ESP (если модуль доступен) ===
if ESP then
    Lib.Menu:AddSection(espTab, "Общие настройки")
    Lib.Menu:AddToggle(espTab, "Включить ESP", true, function(state)
        ESP.espEnabled = state
        notify("ESP " .. (state and "включен" or "выключен"))
    end)
    Lib.Menu:AddToggle(espTab, "Включить рамки", true, function(state)
        ESP.boxesEnabled = state
        notify("Рамки " .. (state and "включены" or "выключены"))
    end)
    Lib.Menu:AddToggle(espTab, "Проверка команды", true, function(state)
        ESP.teamCheckEnabled = state
        notify("Проверка команды " .. (state and "включена" or "выключена"))
    end)
    Lib.Menu:AddSlider(espTab, "Дистанция ESP", 100, 5000, 3000, function(value)
        ESP.espMaxDistance = value
        notify("Дистанция ESP: " .. value .. " studs")
    end)

    Lib.Menu:AddSection(espTab, "Трассировщики")
    Lib.Menu:AddToggle(espTab, "Включить трассировщики", true, function(state)
        ESP.tracersEnabled = state
        notify("Трассировщики " .. (state and "включены" or "выключены"))
    end)
    Lib.Menu:AddToggle(espTab, "Трассировщики снизу", false, function(state)
        ESP.tracerFromBottom = state
        notify("Трассировщики снизу " .. (state and "включены" or "выключены"))
    end)
    Lib.Menu:AddSlider(espTab, "Толщина трассировщиков", 1, 5, 2, function(value)
        ESP.tracerThickness = value
        notify("Толщина трассировщиков: " .. value)
    end)

    Lib.Menu:AddSection(espTab, "Скелет")
    Lib.Menu:AddToggle(espTab, "Включить скелет ESP", false, function(state)
        ESP.skeletonEnabled = state
        notify("Скелет ESP " .. (state and "включен" or "выключен"))
    end)

    Lib.Menu:AddSection(espTab, "Рентген")
    Lib.Menu:AddToggle(espTab, "Включить рентген", false, function(state)
        ESP.xrayEnabled = state
        notify("Рентген " .. (state and "включен" or "выключен"))
    end)
    Lib.Menu:AddColorPicker(espTab, "Цвет рентгена", ESP.xrayColor, function(color)
        ESP.xrayColor = color
        notify("Цвет рентгена обновлён")
    end)

    Lib.Menu:AddSection(espTab, "Текст")
    Lib.Menu:AddSlider(espTab, "Размер текста", 8, 20, 10, function(value)
        ESP.textSize = value
        notify("Размер текста: " .. value)
    end)

    Lib.Menu:AddSection(espTab, "Цвета")
    Lib.Menu:AddColorPicker(espTab, "Цвет видимых", ESP.espVisibleColor, function(color)
        ESP.espVisibleColor = color
        notify("Цвет видимых ESP обновлён")
    end)
    Lib.Menu:AddColorPicker(espTab, "Цвет невидимых", ESP.espNotVisibleColor, function(color)
        ESP.espNotVisibleColor = color
        notify("Цвет невидимых ESP обновлён")
    end)
end

-- Обработка чат-команд
local function handleChatCommand(message)
    local lowerMessage = message:lower()
    if lowerMessage:find("^го%s+") then
        local playerName = message:match("^го%s+(.+)$")
        if playerName then
            playerName = playerName:match("^%s*(.-)%s*$")
            if playerName ~= "" then
                teleportToPlayer(playerName)
            else
                notify("Использование: го <игрок>")
            end
        else
            notify("Использование: го <игрок>")
        end
    end
end

-- Поддержка обеих систем чата
if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
    TextChatService.MessageReceived:Connect(function(messageData)
        local speaker = messageData.TextSource
        if speaker and Players:GetPlayerByUserId(speaker.UserId) == LocalPlayer then
            handleChatCommand(messageData.Text)
        end
    end)
else
    local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if chatEvents then
        chatEvents.OnMessageDoneFiltering:Connect(function(messageData)
            if Players:FindFirstChild(messageData.FromSpeaker) == LocalPlayer then
                handleChatCommand(messageData.Message)
            end
        end)
    else
        notify("Система чата не найдена, команда /tp может не работать", 5)
    end
end

-- Инициализация
notify("Скрипт успешно загружен", 5)
